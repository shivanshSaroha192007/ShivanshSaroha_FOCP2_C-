  Q1.cpp
#include <iostream>
#include<string>
using namespace std;

int main() {
    string name;
    int age;
    cout<<"enter name & age:";
    cin>>name>>age;
    cout<<"hello "<<name<<" you are "<<age<<" years old "<<endl;
    
    

    return 0;
}
Q2.cpp
#include <iostream>
#include<string>
using namespace std;

int main() {
    int a,b;
    cout<<"enter a&b:"<<endl;
    cin>>a>>b;
    cout<<"sum is "<<a+b;
    

    return 0;
}
Q3#include <iostream>
#include<string>
using namespace std;

int main() {
    int a,b;
    char opr;
    cout<<"enter a&b :";
    cin>>a>>b;
    cout<<"enter operation:";
    cin>>opr;
    switch(opr){
        case '+':cout<<a+b;
        break;
        case '-':cout<<a-b;
        break;
        case '*':cout<<a*b;
        break;
        case '/':cout<<a/b;
        break;
        default:"enter valid operator";
    }

    return 0;}
Q4.cpp
*#include <iostream>

#include<iomanip>
using namespace std;

int main() {
    float a,b;
    cin>>a>>b;
    float c=a/b;
    cout<<fixed<<setprecision(2)<<c;
    
    

    return 0;
}
Q5.cpp
#include <iostream>

#include<iomanip>
using namespace std;

int main() {
    int p,r,time;
    cout<<"enter principal value,rate,time;
    cin>>p>>r>>time;
    double a=p*pow((1+r/100),time);
    double ci=a-p;
    cout<<ci;
    
    

    return 0;
}
Q6.cpp
#include <iostream>

#include<iomanip>
using namespace std;

int main() {
    int length,width;
    cout<<"enter length,width:";
    cin>>length>>width;
    cout<<"area of reactangle:"<<length*width;
    cout<<"perimeter of rectangle:"<<2*(length +width);
    
    
    
    

    return 0;
}
Q7.cpp
#include <iostream>

#include<iomanip>
using namespace std;

int main() {
    int a=5,b=3;
    int c;
    c=a;
    a=b;
    b=c;
    
    
    
    
    

    return 0;
}*/
//using +,-
/*#include <iostream>

#include<iomanip>
using namespace std;

int main() {
    int a=5,b=3;
    a=a+b;
    b=a-b;
    a=a-b;
    
    
    

    return 0;
}
Q8.cpp
#include <iostream>
#include <string>
#include <iomanip>
using namespace std;

int main() {
    string name;
    int age;
    cout << "Enter name and age: ";
    cin >> name >> age;
    cout << "Hello " << name << ", you have lived " << age * 365 << " days." << endl;

    return 0;
}
Q9.cpp
#include <iostream>
#include<string>
#include<iomanip>
using namespace std;

int main() {
    char b;
    int a;
    float c;
    cin>>c;
    cin>>b;
    cin>>a;
    cout<<"charchter: "<<b;
    cout<<"float"<<c;
    cout<<"integer"<<a;
    
    return 0;
}
Q10.cpp
#include <iostream>
using namespace std;

int main() {
    int a, b;
    cout << "Enter two numbers: ";
    cin >> a >> b;

    if (b != 0 && a % b == 0) {
        cout << a << " is a multiple of " << b << endl;
    } else if (b == 0) {
        cout << "Cannot divide by zero!" << endl;
    } else {
        cout << a << " is not a multiple of " << b << endl;
    }

    return 0;
}
Q11.cpp
#include <iostream>
using namespace std;

int main() {
    int num, count = 0;
    cout << "Enter an integer: ";
    cin >> num;

    int temp = num; // To preserve the original number for display

    while (num != 0) {
        count += num & 1; // Check the least significant bit
        num >>= 1;        // Right shift the number by 1
    }

    cout << "The number of 1 bits in " << temp << " is: " << count << endl;
    return 0;
}
Q12.cpp
#include <iostream>
#include <cmath>
#include <iomanip>
using namespace std;

int main() {
    float a, b, c, d, ans1, ans2;
    cout << "Enter a, b, c: ";
    cin >> a >> b >> c;
    d = b * b - (4 * a * c);
    if (a == 0 || d < 0) 
        cout << "Complex answer (no real roots)" << endl;
    else if (d == 0) {
        ans1 = -b / (2 * a);
        cout << "Roots are real and same: " << ans1 << endl;
    } else {
        ans1 = (-b + sqrt(d)) / (2 * a);
        ans2 = (-b - sqrt(d)) / (2 * a);
        cout << "Roots are: " << ans1 << " and " << ans2 << endl;
    }
    return 0;
}

Q13.cpp
#include <iostream>
#include <cstdlib>  // For exit()
#include <string>   // For string comparison
using namespace std;

int main() {
    int total_amount, a, b, c;
    string choice;
    
    cout << "Enter current total amount: ";
    cin >> total_amount;

    cout << "Enter choice (withdrawal, deposit, balance enquiry, exit): ";
    cin >> choice;

    if (choice == "withdrawal") {
        cout << "Enter amount to be withdrawn: ";
        cin >> c;
        total_amount -= c;
        cout << "Amount withdrawn: " << c << endl;
    }
    else if (choice == "deposit") {
        cout << "Enter amount to be deposited: ";
        cin >> b;
        total_amount += b;
        cout << "New total: " << total_amount << endl;
    }
    else if (choice == "balance enquiry") {
        cout << "Total balance: " << total_amount << endl;
    }
    else if (choice == "exit") {
        exit(0);  // Exit the program
    }
    else {
        cout << "Invalid choice" << endl;
    }

    return 0;
}
Q14.cpp
#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
using namespace std;

int main() {
    int a, b, c;
    cout << "Enter sides: ";
    cin >> a >> b >> c;
    if (a + b > c && a + c > b && b + c > a) {
        cout << "Valid" << endl;
        if (a == b && b == c) cout << "Equilateral" << endl;
        else if (a == b || b == c || a == c) cout << "Isosceles" << endl;
        else cout << "Scalene" << endl;
    } else cout << "Invalid" << endl;
    return 0;
}
Q15.cpp
#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
using namespace std;

int main() {
    int a, b, c,d;
cout<<"enter numbers:";
cin>>a>>b>>c>>d;
cout<<(a^b+c&d);
return 0;
}
Q16.cpp
#include <iostream>
using namespace std;
bool opposite(int a,int b){
    return a^b<0;
    
}

int main() {
    int a,b;
    cin>>a>>b;
    if (opposite(a,b))
    cout<<"yes";
    else
    cout<<"no";
    
    return 0;
}

Q17.cpp
#include <iostream>
using namespace std;

int main() {
    float a,b,r,q;
    r=0.0;
    q=0.0;
    cout<<"enter a& b:";
    cin>>a>>b;
    if(a==0.0)
    cout<<"answer = 0";
    else if(b==0.0)
    cout<<"not defined";
    else
    {while(a>=b){
        a-=b;
        q++;
    }
    cout<<q;
    }
    
    

    return 0;
}
Q18.cpp
#include<iostream>
using namespace std;

int circularLeftShift(int num, int positions) {
    int bitCount = sizeof(num) * 8;
    return (num << positions) | (num >> (bitCount - positions));
}

int circularRightShift(int num, int positions) {
    int bitCount = sizeof(num) * 8;
    return (num >> positions) | (num << (bitCount - positions));
}

int main() {
    int num, leftShiftPos, rightShiftPos;

    cout << "Enter an integer: ";
    cin >> num;
    
    cout << "Enter the number of positions to shift for left and right shifts: ";
    cin >> leftShiftPos >> rightShiftPos;

    int leftShifted = circularLeftShift(num, leftShiftPos);
    int rightShifted = circularRightShift(num, rightShiftPos);

    cout << "Original number: " << num << endl;
    cout << "After circular left shift by " << leftShiftPos << " positions: " << leftShifted << endl;
    cout << "After circular right shift by " << rightShiftPos << " positions: " << rightShifted << endl;

    return 0;
}

Q19.cpp
#include <iostream>
using namespace std;

int main() {
    int a;
    cout<<"enter grade out of 10:";
    cin>>a;
    switch(a){
        case 10:cout<<"A+";
        break;
        case 9:cout<<"A";
        break;
        case 8:cout<<"B+";
        break;
        case 7:cout<<"B";
        break;
        case 6:cout<<"C+";
        break;
        case 5:cout<<"C";
        break;
        default:cout<<"Enter correct Number";
        
    
    }

    return 0;
}
Q20.cpp
#include <iostream>
using namespace std;

int main() {
    int a;
    float b,c;
    cout<<"enter numbers:";
    cin>>b>>c;
    cout<<"Menu:\n";
    cout<<"1. Addition\n";
    cout<<"2. Subtraction\n";
    cout<<"3. Multiplication\n";
    cout<<"4. Division\n";
    cout<<"5. Exit\n";
    cout<<"Enter your choice: ";
    
    cin>>a;
    switch(a){
        case 1:cout<<b+c;
        break;
        case 2:cout<<b-c;
        break;
        case 3:cout<<b*c;
        break;
        case 4:cout<<b/c;
        break;
        case 5:exit(0);
        break;
        default:cout<<"Enter correct operation";
        
    
    }

    return 0;
}
Q21.cpp
#include<iostream>
using namespace std;
int main(){
    int year;
    cout<<"Enter a year: ";
    cin>>year;
    if(year % 4 == 0){
        if(year % 100 == 0){
            if(year % 400 == 0)
                cout<<year<<" is a leap year."<<endl;
            else
                cout<<year<<" is not a leap year."<<endl;
        }else{
            cout<<year<<" is a leap year."<<endl;
        }
    }else{
        cout<<year<<" is not a leap year."<<endl;
    }
    return 0;
}
Q22.cpp
#include<iostream>
using namespace std;
int main(){
    int n, a = 0, b = 1, c;
    cout << "Enter the number of terms: ";
    cin >> n;
    cout << "Fibonacci Series: ";
    for(int i = 1; i <= n; i++){
        if(i == 1) cout << a << " ";
        else if(i == 2) cout << b << " ";
        else {
            c = a + b;
            a = b;
            b = c;
            cout << c << " ";
        }
    }
    cout << endl;
    return 0;
}

Q23.cpp
#include<iostream>
using namespace std;
int main(){
    int num, i = 2, flag = 0;
    cout << "Enter a number: ";
    cin >> num;
    if(num <= 1){
        cout << num << " is not a prime number." << endl;
    }else{
        while(i <= num / 2){
            if(num % i == 0){
                flag = 1;
                break;
            }
            i++;
        }
        if(flag == 0)
            cout << num << " is a prime number." << endl;
        else
            cout << num << " is not a prime number." << endl;
    }
    return 0;
}
Q24.cpp
#include <iostream>
using namespace std;
int fact(int a)
{int b=1,c=1;
do{b=b*c;
c++;

    
}while(c<=a);
return b;}

int main() {
    int a;
    cout<<"enter no :";
    cin>>a;
    cout<<fact(a);
    
    

    return 0;
}
Q25.cpp
#include <iostream>
#include <cstdarg>
#include <vector>

using namespace std;

void processNumbers(int count, ...) {
    va_list args;
    va_start(args, count);

    int sum = 0;
    int max_number = 0;
    int min_number = 0;

    if (count > 0) {
        max_number = va_arg(args, int);
        min_number = max_number;
        sum += max_number;
    }

    for (int i = 1; i < count; ++i) {
        int num = va_arg(args, int);
        sum += num;

        if (num > max_number) {
            max_number = num;
        }

        if (num < min_number) {
            min_number = num;
        }
    }

    va_end(args);

    cout << "\nResults:" << endl;
    cout << "Sum of all entered numbers: " << sum << endl;
    cout << "Count of valid integers entered: " << count << endl;
    cout << "Maximum number: " << max_number << endl;
    cout << "Minimum number: " << min_number << endl;
}

int main() {
    int number;
    string user_input;
    vector<int> numbers;

    while (true) {
        cout << "Enter an integer (or 'exit' to quit): ";
        cin >> user_input;

        if (user_input == "exit") {
            break;
        }

        try {
            number = stoi(user_input);
            numbers.push_back(number);
        } catch (invalid_argument& e) {
            cout << "Invalid input. Please enter a valid integer." << endl;
        } catch (out_of_range& e) {
            cout << "Number out of range. Please enter a valid integer." << endl;
        }
    }

    if (!numbers.empty()) {
        int count = numbers.size();
        processNumbers(count, numbers[0], numbers.data(), count);
    } else {
        cout << "No valid numbers were entered." << endl;
    }

    return 0;
}
Q26.cpp
#include <iostream>
using namespace std;

int main() {
    int n;
    cout << "Enter the number of primes to generate: ";
    cin >> n;

    int count = 0;
    int num = 2;

    while (count < n) {
        bool prime = true;

        for (int i = 2; i * i <= num; ++i) {
            if (num % i == 0) {
                prime = false;
                break;
            }
        }

        if (prime) {
            cout << num << " ";
            count++;
        }

        num++;
    }

    cout << endl;
    return 0;
}Q27.cpp
#include <iostream>
#include <math.h>

using namespace std;

bool isArmstrong(int num) {
    int originalNum = num;
    int sum = 0;
    int n = 0;

    while (originalNum != 0) {
        originalNum /= 10;
        n++;
    }

    originalNum = num;

    while (originalNum != 0) {
        int digit = originalNum % 10;
        sum += pow(digit, n);
        originalNum /= 10;
    }

    return sum == num;
}

int main() {
    int start, end;

    cout << "Enter the starting range: ";
    cin >> start;
    cout << "Enter the ending range: ";
    cin >> end;

    cout << "Armstrong numbers between " << start << " and " << end << " are:" << endl;
    
    for (int i = start; i <= end; i++) {
        if (isArmstrong(i)) {
            cout << i << " ";
        }
    }
    cout << endl;

    return 0;
}
Q28.cpp
#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

int main() {
    srand(time(0));
    int number = rand() % 100 + 1;
    int guess;
    int attempts = 10;

    cout << "Welcome to the Number Guessing Game!" << endl;
    cout << "I have chosen a number between 1 and 100." << endl;
    cout << "You have " << attempts << " attempts to guess the number." << endl;

    for (int i = 0; i < attempts; i++) {
        cout << "Attempt " << i + 1 << ": Enter your guess: ";
        cin >> guess;

        if (guess == number) {
            cout << "Congrats! You guessed it!" << endl;
            return 0;
        } else if (guess < number) {
            cout << "Too low!" << endl;
        } else {
            cout << "Too high!" << endl;
        }
    }

    cout << "Sorry, out of attempts. The number was " << number << "." << endl;
    return 0;
}
Q29.cpp
#include <iostream>
using namespace std;

int main() {
    int i,a, n=50;
    for(i=51;i<100;i++){
        if(i%7==0)
        {a=i;
        break;}
        
    }
    
  cout<<a;

    return 0;
}
Q30.cpp
#include <iostream>
using namespace std;

int main() {
    int i,a=0, n=50;
    for(i=1;i<=500;i++){
        if(i%3!=0&&i%7!=0)
        {cout<<i<<endl;
        a+=i;}
        else if(a>=1000)
        {break;}
        else
        continue;
        
    }
    


    return 0;
}
Q31.cpp
#include <iostream>
using namespace std;

int main() {
    int a,e,i,o=0,u;
    cout<<"enter number to be reversed:";
    cin>>a;
    i=a;
    while(a>0)
    {e=a%10;
    o=o*10+e;
    a=a/10;
    if(i==a)
    {
    u=1;
    }
    
    
    
        
    }
    if(u!=1)
    cout<<o;
    else
    exit(0);
    


    return 0;
}
Q32.cpp
#include <iostream>

using namespace std;

int main() {
    int n;
    
    cout << "Enter the number of elements in the array: ";
    cin >> n;

    int arr[n];
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    if (n < 2) {
        cout << "Array needs at least two elements to find the second largest element." << endl;
        return 0;
    }

    int firstLargest = arr[0];
    int secondLargest = arr[0];

    for (int i = 1; i < n; i++) {
        if (arr[i] > firstLargest) {
            secondLargest = firstLargest;
            firstLargest = arr[i];
        } else if (arr[i] > secondLargest && arr[i] != firstLargest) {
            secondLargest = arr[i];
        }
    }

    if (firstLargest == secondLargest) {
        cout << "There is no second largest element." << endl;
    } else {
        cout << "The second largest element is: " << secondLargest << endl;
    }

    return 0;
}
Q33.cpp
#include <iostream>
#include <math.h>

using namespace std;

bool canBeRepresentedExactly(double number) {
    double integralPart, fractionalPart;
    fractionalPart = modf(number, &integralPart);

    while (fractionalPart != 0) {
        fractionalPart *= 2;
        if (fractionalPart >= 1) {
            fractionalPart -= 1;
        }
        if (fractionalPart == 0.5) {
            return true;
        }
    }
    return true;
}

int main() {
    double number;
    cout << "Enter a floating-point number: ";
    cin >> number;

    if (canBeRepresentedExactly(number)) {
        cout << "The number " << number << " can be represented exactly in binary format." << endl;
    } else {
        cout << "The number " << number << " cannot be represented exactly in binary format." << endl;
    }

    return 0;
}
Q34.cpp
#include <iostream>
#include <iomanip>

using namespace std;

int main() {
    int rows, cols;
    
    cout << "Enter the number of rows: ";
    cin >> rows;
    cout << "Enter the number of columns: ";
    cin >> cols;

    int arr[rows][cols];
    cout << "Enter the elements of the array:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> arr[i][j];
        }
    }

    cout << "Formatted 2D Array:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << setw(5) << arr[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
Q35.cpp
#include <iostream>

using namespace std;

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int lcm(int a, int b) {
    return (a * b) / gcd(a, b);
}

int main() {
    int num1, num2;

    cout << "Enter two integers: ";
    cin >> num1 >> num2;

    int gcdResult = gcd(num1, num2);
    int lcmResult = lcm(num1, num2);

    cout << "GCD of " << num1 << " and " << num2 << " is: " << gcdResult << endl;
    cout << "LCM of " << num1 << " and " << num2 << " is: " << lcmResult << endl;

    return 0;
}
//Assignment 2
Q1.cpp
#include <iostream>
using namespace std;

void butterflyPattern(int n) {
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= i; j++) cout << "*";
        for (int j = 1; j <= 2 * (n - i); j++) cout << " ";
        for (int j = 1; j <= i; j++) cout << "*";
        cout << endl;
    }
    for (int i = n; i >= 1; i--) {
        for (int j = 1; j <= i; j++) cout << "*";
        for (int j = 1; j <= 2 * (n - i); j++) cout << " ";
        for (int j = 1; j <= i; j++) cout << "*";
        cout << endl;
    }
}

int main() {
    int n;
    cout << "Enter n: ";
    cin >> n;
    butterflyPattern(n);
    return 0;
}
Q2.cpp
#include <iostream>
using namespace std;

void reverseArray(int arr[], int n) {
    cout << "Reversed array: ";
    for (int i = n - 1; i >= 0; i--) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    reverseArray(arr, n);
    return 0;
}
Q3.cpp
#include <iostream>
using namespace std;

void findMaxMin(int arr[], int n) {
    int maxVal = arr[0], minVal = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > maxVal) maxVal = arr[i];
        if (arr[i] < minVal) minVal = arr[i];
    }
    cout << "Maximum: " << maxVal << endl;
    cout << "Minimum: " << minVal << endl;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    findMaxMin(arr, n);
    return 0;
}
Q4.cpp
#include <iostream>
using namespace std;

void calculateSumAndAverage(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    double average = (double)sum / n;
    cout << "Sum: " << sum << endl;
    cout << "Average: " << average << endl;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    calculateSumAndAverage(arr, n);
    return 0;
}
Q5.cpp
#include <iostream>
using namespace std;

void sortArray(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
    cout << "Sorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    sortArray(arr, n);
    return 0;
}
Q6.cpp
#include <iostream>
using namespace std;

int linearSearch(int arr[], int n, int key) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == key) {
            return i;
        }
    }
    return -1;
}

int main() {
    int n, key;
    cout << "Enter number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << "Enter element to search: ";
    cin >> key;
    int result = linearSearch(arr, n, key);
    if (result != -1) {
        cout << "Element found at index: " << result << endl;
    } else {
        cout << "Element not found" << endl;
    }
    return 0;
}
Q7.cpp
//Input an array of n numbers and remove all duplicate elements.
#include <iostream>
using namespace std;

void removeDuplicates(int arr[], int &n) {
    int temp[n];
    int j = 0;
    for (int i = 0; i < n; i++) {
        bool found = false;
        for (int k = 0; k < j; k++) {
            if (arr[i] == temp[k]) {
                found = true;
                break;
            }
        }
        if (!found) {
            temp[j++] = arr[i];
        }
    }
    for (int i = 0; i < j; i++) {
        arr[i] = temp[i];
    }
    n = j;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    removeDuplicates(arr, n);
    cout << "Array after removing duplicates: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
    return 0;
}
Q8.cpp
//Find the length of the longest subsequence of consecutive integers in an unsorted array.
#include <iostream>
using namespace std;

void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int findLongestConsecutiveSubsequence(int arr[], int n) {
    bubbleSort(arr, n);
    int longest = 1, current = 1;
    for (int i = 1; i < n; i++) {
        if (arr[i] == arr[i - 1] + 1) {
            current++;
        } else if (arr[i] != arr[i - 1]) {
            if (current > longest) {
                longest = current;
            }
            current = 1;
        }
    }
    return (current > longest) ? current : longest;
}

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;
    int arr[n];
    cout << "Enter elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    cout << "Length of longest consecutive subsequence: " << findLongestConsecutiveSubsequence(arr, n) << endl;
    return 0;
}
Q9.cpp
//Write a program to find the transpose of a matrix.
#include <iostream>
using namespace std;

void transposeMatrix(int matrix[][10], int rows, int cols) {
    int transposed[10][10];
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            transposed[j][i] = matrix[i][j];
        }
    }
    cout << "Transposed Matrix:" << endl;
    for (int i = 0; i < cols; i++) {
        for (int j = 0; j < rows; j++) {
            cout << transposed[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int rows, cols, matrix[10][10];
    cout << "Enter number of rows and columns: ";
    cin >> rows >> cols;
    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }
    transposeMatrix(matrix, rows, cols);
    return 0;
}
Q10.cpp
//Multiply two matrices of appropriate dimensions.
#include <iostream>
using namespace std;

void multiplyMatrices(int A[][10], int B[][10], int result[][10], int r1, int c1, int c2) {
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < c1; k++) {
                result[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void printMatrix(int matrix[][10], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }
}

int main() {
    int r1, c1, r2, c2, A[10][10], B[10][10], result[10][10];
    cout << "Enter rows and columns of first matrix: ";
    cin >> r1 >> c1;
    cout << "Enter first matrix elements: ";
    for (int i = 0; i < r1; i++) {
        for (int j = 0; j < c1; j++) {
            cin >> A[i][j];
        }
    }
    cout << "Enter rows and columns of second matrix: ";
    cin >> r2 >> c2;
    if (c1 != r2) {
        cout << "Matrix multiplication not possible!" << endl;
        return 0;
    }
    cout << "Enter second matrix elements: ";
    for (int i = 0; i < r2; i++) {
        for (int j = 0; j < c2; j++) {
            cin >> B[i][j];
        }
    }
    multiplyMatrices(A, B, result, r1, c1, c2);
    cout << "Resultant Matrix: " << endl;
    printMatrix(result, r1, c2);
    return 0;
}
Q11.cpp
//Calculate the sum of elements on the primary and secondary diagonals of a square matrix.
#include <iostream>
using namespace std;

void diagonalSum(int matrix[][10], int n) {
    int primarySum = 0, secondarySum = 0;
    for (int i = 0; i < n; i++) {
        primarySum += matrix[i][i];
        secondarySum += matrix[i][n - i - 1];
    }
    cout << "Primary diagonal sum: " << primarySum << endl;
    cout << "Secondary diagonal sum: " << secondarySum << endl;
}

int main() {
    int n, matrix[10][10];
    cout << "Enter size of square matrix: ";
    cin >> n;
    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }
    diagonalSum(matrix, n);
    return 0;
}
Q12.cpp
//Write a program to find the row in a 2D matrix that has the maximum sum of its elements.
#include <iostream>
using namespace std;

void findMaxRowSum(int matrix[][10], int rows, int cols) {
    int maxSum = 0, maxRow = 0;
    for (int i = 0; i < rows; i++) {
        int rowSum = 0;
        for (int j = 0; j < cols; j++) {
            rowSum += matrix[i][j];
        }
        if (rowSum > maxSum) {
            maxSum = rowSum;
            maxRow = i;
        }
    }
    cout << "Row with maximum sum: " << maxRow + 1 << " (Sum: " << maxSum << ")" << endl;
}

int main() {
    int rows, cols, matrix[10][10];
    cout << "Enter number of rows and columns: ";
    cin >> rows >> cols;
    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }
    findMaxRowSum(matrix, rows, cols);
    return 0;
}
Q13.cpp
//Write a program to search for a target value in a row-wise and column-wise sorted matrix.
#include <iostream>
using namespace std;

bool searchInSortedMatrix(int matrix[][10], int rows, int cols, int target) {
    int i = 0, j = cols - 1;
    while (i < rows && j >= 0) {
        if (matrix[i][j] == target) {
            cout << "Element found at position: (" << i << ", " << j << ")" << endl;
            return true;
        }
        if (matrix[i][j] > target) {
            j--;
        } else {
            i++;
        }
    }
    cout << "Element not found" << endl;
    return false;
}

int main() {
    int rows, cols, matrix[10][10], target;
    cout << "Enter number of rows and columns: ";
    cin >> rows >> cols;
    cout << "Enter matrix elements in sorted order:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }
    cout << "Enter target element to search: ";
    cin >> target;
    searchInSortedMatrix(matrix, rows, cols, target);
    return 0;
}
Q14.cpp//Print all the boundary elements of a matrix.
#include <iostream>
using namespace std;

void printBoundaryElements(int matrix[][10], int rows, int cols) {
    cout << "Boundary elements: ";
    for (int j = 0; j < cols; j++) cout << matrix[0][j] << " ";
    for (int i = 1; i < rows - 1; i++) {
        cout << matrix[i][0] << " ";
        if (cols > 1) cout << matrix[i][cols - 1] << " ";
    }
    if (rows > 1) {
        for (int j = 0; j < cols; j++) cout << matrix[rows - 1][j] << " ";
    }
    cout << endl;
}

int main() {
    int rows, cols, matrix[10][10];
    cout << "Enter number of rows and columns: ";
    cin >> rows >> cols;
    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }
    printBoundaryElements(matrix, rows, cols);
    return 0;
}
Q15.cpp
//A saddle point is an element of the matrix that is the smallest in its row but the largest in its column. Write a program to find the saddle point.
#include <iostream>
using namespace std;

void findSaddlePoint(int matrix[][10], int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        int minRow = matrix[i][0], colIndex = 0;
        for (int j = 1; j < cols; j++) {
            if (matrix[i][j] < minRow) {
                minRow = matrix[i][j];
                colIndex = j;
            }
        }
        bool isSaddlePoint = true;
        for (int k = 0; k < rows; k++) {
            if (matrix[k][colIndex] > minRow) {
                isSaddlePoint = false;
                break;
            }
        }
        if (isSaddlePoint) {
            cout << "Saddle point found at (" << i << ", " << colIndex << ") with value: " << minRow << endl;
            return;
        }
    }
    cout << "No saddle point found" << endl;
}

int main() {
    int rows, cols, matrix[10][10];
    cout << "Enter number of rows and columns: ";
    cin >> rows >> cols;
    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            cin >> matrix[i][j];
        }
    }
    findSaddlePoint(matrix, rows, cols);
    return 0;
}
//assignment 3
Q1.cpp
#include <iostream>
using namespace std;

int maxNumber(int a, int b) {
    return (a > b) ? a : b;
}

int main() {
    int a, b;
    cout << "Enter two numbers: ";
    cin >> a >> b;
    cout << "The larger number is: " << maxNumber(a, b) << endl;
    return 0;
}
Q2.cpp
#include <iostream>
using namespace std;

int factorial(int n) {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

int main() {
    int n;
    cout << "Enter a number to calculate its factorial: ";
    cin >> n;
    cout << "The factorial of " << n << " is: " << factorial(n) << endl;
    return 0;
}

Q3.cpp
#include <iostream>
using namespace std;

int reverseNumber(int n) {
    int reversed = 0;
    while (n > 0) {
        reversed = reversed * 10 + (n % 10);
        n /= 10;
    }
    return reversed;
}

int main() {
    int n;
    cout << "Enter a number to reverse: ";
    cin >> n;
    cout << "The reversed number is: " << reverseNumber(n) << endl;
    return 0;
}
Q4.cpp
#include <iostream>
using namespace std;

int sumOfDigits(int n) {
    int sum = 0;
    while (n > 0) {
        sum += n % 10;
        n /= 10;
    }
    return sum;
}

int main() {
    int n;
    cout << "Enter a number to calculate the sum of its digits: ";
    cin >> n;
    cout << "The sum of the digits is: " << sumOfDigits(n) << endl;
    return 0;
}
Q5.cpp
#include <iostream>
using namespace std;

int reverseNumber(int n); // Declaring function from q3.cpp.

bool isPalindrome(int n) {
    return n == reverseNumber(n);
}

int main() {
    int n;
    cout << "Enter a number to check if it's a palindrome: ";
    cin >> n;
    if (isPalindrome(n)) {
        cout << n << " is a palindrome." << endl;
    } else {
        cout << n << " is not a palindrome." << endl;
    }
    return 0;
}
Q6.cpp
#include <iostream>
using namespace std;

int fibonacci(int n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    int n;
    cout << "Enter the position (n) to find the nth Fibonacci number: ";
    cin >> n;
    cout << "The " << n << "th Fibonacci number is: " << fibonacci(n) << endl;
    return 0;
}
Q7.cpp
#include <iostream>
using namespace std;

int gcd(int a, int b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}

int main() {
    int a, b;
    cout << "Enter two numbers to calculate their GCD: ";
    cin >> a >> b;
    cout << "The GCD of " << a << " and " << b << " is: " << gcd(a, b) << endl;
    return 0;
}
Q8.cpp
#include <iostream>
using namespace std;

void print(string s) {
    cout << s << endl;
}

void print(int n) {
    cout << n << endl;
}

void print(string s, int n) {
    cout << s << " " << n << endl;
}

int main() {
    print("Hello, World!");
    print(42);
    print("The answer is", 42);
    return 0;
}
Q9.cpp#include <iostream>
using namespace std;

class Calculator {
public:
    int sum(int a, int b) {
        return a + b;
    }

    double sum(double a, double b, double c) {
        return a + b + c;
    }

    float sum(int a, float b) {
        return a + b;
    }
};

int main() {
    Calculator calc;
    cout << "Sum of 2 + 3: " << calc.sum(2, 3) << endl;
    cout << "Sum of 1.1 + 2.2 + 3.3: " << calc.sum(1.1, 2.2, 3.3) << endl;
    cout << "Sum of 4 + 5.5: " << calc.sum(4, 5.5f) << endl;
    return 0;
}
Q10.cpp#include <iostream>
using namespace std;

int multiply(int a, int b) {
    return a * b;
}

double multiply(int a, double b) {
    return a * b;
}

float multiply(float a, float b, float c) {
    return a * b * c;
}

int main() {
    cout << "Product of 2 * 3: " << multiply(2, 3) << endl;
    cout << "Product of 2 * 3.5: " << multiply(2, 3.5) << endl;
    cout << "Product of 1.2 * 2.3 * 3.4: " << multiply(1.2f, 2.3f, 3.4f) << endl;
    return 0;
}

Q11.cpp
#include <iostream>
using namespace std;

void greet() {
    cout << "Hello!" << endl;
}

void greet(string name) {
    cout << "Hello, " << name << "!" << endl;
}

void greet(string name, int age) {
    cout << "Hello, " << name << "! You are " << age << " years old." << endl;
}

int main() {
    greet();
    greet("Alice");
    greet("Bob", 25);
    return 0;
}

Q12.cpp
#include <iostream>
#include <cmath>
using namespace std;

int area(int side) {
    return side * side;
}

int area(int length, int breadth) {
    return length * breadth;
}

double area(double radius) {
    return M_PI * radius * radius;
}

int main() {
    cout << "Area of square (side = 4): " << area(4) << endl;
    cout << "Area of rectangle (4 x 5): " << area(4, 5) << endl;
    cout << "Area of circle (radius = 3): " << area(3.0) << endl;
    return 0;
}
Q13.cpp
#include <iostream>
#include <string>
using namespace std;

string concat(string a, string b) {
    return a + b;
}

string concat(int a, string b) {
    return to_string(a) + b;
}

int main() {
    cout << "Concatenation of 'Hello' and 'World': " << concat("Hello", "World") << endl;
    cout << "Concatenation of 123 and 'ABC': " << concat(123, "ABC") << endl;
    return 0;
}

Q14.cpp
#include <iostream>
#include <cmath>
using namespace std;

int power(int base, int exponent) {
    return pow(base, exponent);
}

double power(double base, int exponent) {
    return pow(base, exponent);
}

int main() {
    cout << "2^3 = " << power(2, 3) << endl;
    cout << "2.5^3 = " << power(2.5, 3) << endl;
    return 0;
}
Q15.cpp#include <iostream>
#include <cstdarg>
using namespace std;

int sum(int count, ...) {
    va_list args; 
    va_start(args, count); 
    int total = 0;
    for (int i = 0; i < count; i++) {
        total += va_arg(args, int);
    }
    va_end(args); 
    return total;
}

int main() {
    cout << "Sum of 1, 2, 3, 4, 5: " << sum(5, 1, 2, 3, 4, 5) << endl;
    cout << "Sum of 10, 20: " << sum(2, 10, 20) << endl;
    return 0;
}
Q16.cpp
#include <iostream>
#include <cstdarg>
using namespace std;

int findLargest(int count, ...) {
    va_list args;
    va_start(args, count);
    int largest = va_arg(args, int);
    for (int i = 1; i < count; i++) {
        int num = va_arg(args, int);
        if (num > largest) {
            largest = num;
        }
    }
    va_end(args);
    return largest;
}

int main() {
    cout << "Largest of 10, 20, 5, 8: " << findLargest(4, 10, 20, 5, 8) << endl;
    cout << "Largest of 1, 2, 3: " << findLargest(3, 1, 2, 3) << endl;
    return 0;
}
Q17.cpp#include <iostream>
#include <string>
#include <cstdarg>
using namespace std;

void concatStrings(int count, ...) {
    va_list args;
    va_start(args, count);
    string result = "";
    for (int i = 0; i < count; i++) {
        result += va_arg(args, const char*);
    }
    va_end(args);
    cout << "Concatenated string: " << result << endl;
}

int main() {
    concatStrings(3, "Hello", " ", "World!");
    concatStrings(2, "C++", "Programming");
    return 0;
}

Q18.cpp
#include <iostream>
using namespace std;

int gcd(int a, int b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}

int main() {
    cout << "GCD of 48 and 18: " << gcd(48, 18) << endl;
    cout << "GCD of 100 and 25: " << gcd(100, 25) << endl;
    return 0;
}

Q19.cpp
#include <iostream>
using namespace std;

int factorial(int n) {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

int main() {
    cout << "Factorial of 5: " << factorial(5) << endl;
    cout << "Factorial of 7: " << factorial(7) << endl;
    return 0;
}

Q20.cpp#include <iostream>
using namespace std;

int fibonacci(int n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    cout << "5th Fibonacci number: " << fibonacci(5) << endl;
    cout << "7th Fibonacci number: " << fibonacci(7) << endl;
    return 0;
}

Q21.cpp
#include <iostream>
#include <string>
using namespace std;

string reverseString(string str) {
    if (str.empty()) return "";
    return reverseString(str.substr(1)) + str[0];
}

int main() {
    cout << "Reversed 'hello': " << reverseString("hello") << endl;
    cout << "Reversed 'world': " << reverseString("world") << endl;
    return 0;
}

Q22.cpp
#include <iostream>
using namespace std;

int sumOfNaturalNumbers(int n) {
    if (n == 0) return 0;
    return n + sumOfNaturalNumbers(n - 1);
}

int main() {
    cout << "Sum of first 5 natural numbers: " << sumOfNaturalNumbers(5) << endl;
    cout << "Sum of first 10 natural numbers: " << sumOfNaturalNumbers(10) << endl;
    return 0;
}
Q23.cpp
#include <iostream>
using namespace std;

int power(int base, int exp) {
    if (exp == 0) return 1;
    return base * power(base, exp - 1);
}

int main() {
    cout << "2^3 = " << power(2, 3) << endl;
    cout << "5^4 = " << power(5, 4) << endl;
    return 0;
}

Q24.cpp#include <iostream>
using namespace std;

void swapNumbers(int &a, int &b) {
    int temp = a;
    a = b;
    b = temp;
}

int main() {
    int x = 10, y = 20;
    cout << "Before swap: x = " << x << ", y = " << y << endl;
    swapNumbers(x, y);
    cout << "After swap: x = " << x << ", y = " << y << endl;
    return 0;
}

Q25.cpp#include <iostream>
using namespace std;

int sumArray(int arr[], int size) {
    int sum = 0;
    for (int i = 0; i < size; i++) {
        sum += arr[i];
    }
    return sum;
}

int main() {
    int arr[] = {1, 2, 3, 4, 5};
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << "Sum of array elements: " << sumArray(arr, size) << endl;
    return 0;
}
Q26.cpp
#include <iostream>
using namespace std;

int findMax(int arr[], int size) {
    int max = arr[0];
    for (int i = 1; i < size; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    return max;
}

int main() {
    int arr[] = {10, 20, 5, 30, 15};
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << "Maximum element: " << findMax(arr, size) << endl;
    return 0;
}

Q27.cpp
#include <iostream>
#include <limits.h>
using namespace std;

int findSecondLargest(int arr[], int size) {
    int largest = INT_MIN, secondLargest = INT_MIN;
    for (int i = 0; i < size; i++) {
        if (arr[i] > largest) {
            secondLargest = largest;
            largest = arr[i];
        } else if (arr[i] > secondLargest && arr[i] != largest) {
            secondLargest = arr[i];
        }
    }
    return secondLargest;
}

int main() {
    int arr[] = {10, 20, 5, 30, 15};
    int size = sizeof(arr) / sizeof(arr[0]);
    cout << "Second largest element: " << findSecondLargest(arr, size) << endl;
    return 0;
}

Q28.cpp
#include <iostream>
using namespace std;

int* generateFibonacci(int n) {
    int* fib = new int[n];
    if (n > 0) fib[0] = 0;
    if (n > 1) fib[1] = 1;
    for (int i = 2; i < n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2];
    }
    return fib;
}

int main() {
    int n = 10;
    int* fibArray = generateFibonacci(n);
    cout << "Fibonacci series: ";
    for (int i = 0; i < n; i++) {
        cout << fibArray[i] << " ";
    }
    delete[] fibArray; // Freeing allocated memory
    return 0;
}

Q29.cpp
#include <iostream>
#include <string>
using namespace std;

struct Student {
    string name;
    int marks;
};

void displayStudents(Student arr[], int size) {
    for (int i = 0; i < size; i++) {
        cout << "Name: " << arr[i].name << ", Marks: " << arr[i].marks << endl;
    }
}

int main() {
    Student students[] = {{"Alice", 85}, {"Bob", 90}, {"Charlie", 78}};
    int size = sizeof(students) / sizeof(students[0]);
    displayStudents(students, size);
    return 0;
}

Q30.cpp#include <iostream>
using namespace std;

void doubleArray(int (&arr)[6]) {
    for (int i = 0; i < 6; i++) {
        arr[i] *= 2;
    }
}

int main() {
    int arr[6] = {1, 2, 3, 4, 5, 6};
    cout << "Original array: ";
    for (int i = 0; i < 6; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    doubleArray(arr);

    cout << "Modified array: ";
    for (int i = 0; i < 6; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    return 0;
}






